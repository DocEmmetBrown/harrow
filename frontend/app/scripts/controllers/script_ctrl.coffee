Controller = (
  @project
  @environments
  @tasks
  @scriptResource
  @taskResource
  @script
  @$state
  @$translate
  @flash
  @operations
  @triggers
  @scriptTasks
  @$q
) ->
  @availableEnvironments = angular.copy(@environments)
  @createOnEnviroments = {}

  @availableEnvironments = @environments.filter (env) =>
    @scriptTasks.filter((task) ->
      task.subject.environmentUuid == env.subject.uuid
    ).length == 0

  @scriptTasks.forEach (task) =>
    @createOnEnviroments[task.subject.environmentUuid] = true

  @enabledEnvironments = @environments.filter (env) =>
    @scriptTasks.some (task) ->
      task.subject.environmentUuid == env.subject.uuid

  @disabledEnvironments = @environments.filter (env) =>
    @enabledEnvironments.indexOf(env) == -1
  @

Controller::taskFor = (env) ->
  @tasks.find (task) =>
    task.subject.environmentUuid == env.subject.uuid && task.subject.scriptUuid == @script.subject.uuid

Controller::mostRecentOperationFor = (task) ->
  if task
    operations = @operations.filter (operation) ->
      operation.subject.jobUuid == task.subject.uuid
    operations = operations.sort (a, b) ->
      if a.subject.createdAt > b.subject.createdAt
        return -1
      else if  a.subject.createdAt < b.subject.createdAt
        return 1
      else
        return 0
    operations[0]

Controller::hasTaskForEnv = (envItem) ->
  !@availableEnvironments.some (env) ->
    env.subject.uuid == envItem.subject.uuid

Controller::aceLoaded = (_editor) ->
  # See: https://github.com/angular-ui/ui-ace/issues/104
  _editor.$blockScrolling = Infinity

Controller::_createForEnv = (environmentUuid) ->
  task =
    subject:
      scriptUuid: @script.subject.uuid,
      environmentUuid: environmentUuid,
      description: 'autogenerated by script'
      name: 'autogenerated script'

  hasTask = @scriptTasks.some (task) ->
    task.subject.environmentUuid == environmentUuid

  unless hasTask
    @taskResource.save(task)

Controller::createForEnv = (env) ->
  @_createForEnv(env.subject.uuid).then (task) =>
    @flash.success = @$translate.instant("tasks.flashes.create.success", {environment: env, task: task})
    @$state.go("script", {projectUuid: @script.subject.projectUuid, scriptUuid: @script.subject.uuid}, {reload: true})
    return

Controller::createTasks = () ->
  promises = []
  Object.keys(@createOnEnviroments).forEach (env) =>

    promises.push @_createForEnv(env)

  @$q.all(promises)


Controller::save = () ->
  @scriptResource.save(@script).then (script) =>
    @script = script
    @createTasks().then () =>
      @flash.success = @$translate.instant("forms.script.flashes.create.success", script.subject)
      @$state.go("script", {projectUuid: script.subject.projectUuid, scriptUuid: script.subject.uuid})
      return
  .catch (reason) =>
    @flash.error = @$translate.instant("forms.script.flashes.create.fail", @script.subject)
    @$q.reject(reason)

Controller::delete = () ->
  @scriptResource.delete(@script.subject.uuid).then (script) =>
    @flash.success = @$translate.instant("forms.script.flashes.delete.success", script.subject)
    @$state.go("scripts", {projectUuid: @project.subject.uuid})
    return
  .catch (reason) =>
    @flash.error = @$translate.instant("forms.script.flashes.delete.fail", @script.subject)
    @$q.reject(reason)

angular.module('harrowApp').controller 'scriptCtrl', Controller
