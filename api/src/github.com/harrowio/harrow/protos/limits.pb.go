// Code generated by protoc-gen-go. DO NOT EDIT.
// source: limits.proto

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	limits.proto

It has these top-level messages:
	OrganizationKey
	OrganizationLimits
	OrganizationLimitsExceeded
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OrganizationKey struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *OrganizationKey) Reset()                    { *m = OrganizationKey{} }
func (m *OrganizationKey) String() string            { return proto.CompactTextString(m) }
func (*OrganizationKey) ProtoMessage()               {}
func (*OrganizationKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OrganizationKey) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type OrganizationLimits struct {
	Projects            int32 `protobuf:"varint,1,opt,name=Projects" json:"Projects,omitempty"`
	Members             int32 `protobuf:"varint,2,opt,name=Members" json:"Members,omitempty"`
	PrivateRepositories int32 `protobuf:"varint,3,opt,name=PrivateRepositories" json:"PrivateRepositories,omitempty"`
	PublicRepositories  int32 `protobuf:"varint,4,opt,name=PublicRepositories" json:"PublicRepositories,omitempty"`
	TrialDaysLeft       int32 `protobuf:"varint,5,opt,name=TrialDaysLeft" json:"TrialDaysLeft,omitempty"`
	TrialEnabled        bool  `protobuf:"varint,6,opt,name=TrialEnabled" json:"TrialEnabled,omitempty"`
}

func (m *OrganizationLimits) Reset()                    { *m = OrganizationLimits{} }
func (m *OrganizationLimits) String() string            { return proto.CompactTextString(m) }
func (*OrganizationLimits) ProtoMessage()               {}
func (*OrganizationLimits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OrganizationLimits) GetProjects() int32 {
	if m != nil {
		return m.Projects
	}
	return 0
}

func (m *OrganizationLimits) GetMembers() int32 {
	if m != nil {
		return m.Members
	}
	return 0
}

func (m *OrganizationLimits) GetPrivateRepositories() int32 {
	if m != nil {
		return m.PrivateRepositories
	}
	return 0
}

func (m *OrganizationLimits) GetPublicRepositories() int32 {
	if m != nil {
		return m.PublicRepositories
	}
	return 0
}

func (m *OrganizationLimits) GetTrialDaysLeft() int32 {
	if m != nil {
		return m.TrialDaysLeft
	}
	return 0
}

func (m *OrganizationLimits) GetTrialEnabled() bool {
	if m != nil {
		return m.TrialEnabled
	}
	return false
}

type OrganizationLimitsExceeded struct {
	Exceeded bool `protobuf:"varint,1,opt,name=Exceeded" json:"Exceeded,omitempty"`
}

func (m *OrganizationLimitsExceeded) Reset()                    { *m = OrganizationLimitsExceeded{} }
func (m *OrganizationLimitsExceeded) String() string            { return proto.CompactTextString(m) }
func (*OrganizationLimitsExceeded) ProtoMessage()               {}
func (*OrganizationLimitsExceeded) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OrganizationLimitsExceeded) GetExceeded() bool {
	if m != nil {
		return m.Exceeded
	}
	return false
}

func init() {
	proto.RegisterType((*OrganizationKey)(nil), "protos.OrganizationKey")
	proto.RegisterType((*OrganizationLimits)(nil), "protos.OrganizationLimits")
	proto.RegisterType((*OrganizationLimitsExceeded)(nil), "protos.OrganizationLimitsExceeded")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LimitsService service

type LimitsServiceClient interface {
	Exceeded(ctx context.Context, in *OrganizationKey, opts ...grpc.CallOption) (*OrganizationLimitsExceeded, error)
	ForOrganization(ctx context.Context, in *OrganizationKey, opts ...grpc.CallOption) (*OrganizationLimits, error)
}

type limitsServiceClient struct {
	cc *grpc.ClientConn
}

func NewLimitsServiceClient(cc *grpc.ClientConn) LimitsServiceClient {
	return &limitsServiceClient{cc}
}

func (c *limitsServiceClient) Exceeded(ctx context.Context, in *OrganizationKey, opts ...grpc.CallOption) (*OrganizationLimitsExceeded, error) {
	out := new(OrganizationLimitsExceeded)
	err := grpc.Invoke(ctx, "/protos.LimitsService/Exceeded", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitsServiceClient) ForOrganization(ctx context.Context, in *OrganizationKey, opts ...grpc.CallOption) (*OrganizationLimits, error) {
	out := new(OrganizationLimits)
	err := grpc.Invoke(ctx, "/protos.LimitsService/ForOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LimitsService service

type LimitsServiceServer interface {
	Exceeded(context.Context, *OrganizationKey) (*OrganizationLimitsExceeded, error)
	ForOrganization(context.Context, *OrganizationKey) (*OrganizationLimits, error)
}

func RegisterLimitsServiceServer(s *grpc.Server, srv LimitsServiceServer) {
	s.RegisterService(&_LimitsService_serviceDesc, srv)
}

func _LimitsService_Exceeded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitsServiceServer).Exceeded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.LimitsService/Exceeded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitsServiceServer).Exceeded(ctx, req.(*OrganizationKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitsService_ForOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitsServiceServer).ForOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.LimitsService/ForOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitsServiceServer).ForOrganization(ctx, req.(*OrganizationKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _LimitsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.LimitsService",
	HandlerType: (*LimitsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exceeded",
			Handler:    _LimitsService_Exceeded_Handler,
		},
		{
			MethodName: "ForOrganization",
			Handler:    _LimitsService_ForOrganization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "limits.proto",
}

func init() { proto.RegisterFile("limits.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0x53, 0x05, 0xc4, 0x09, 0x84, 0x64, 0x3c, 0xb8, 0xe9, 0x89, 0x34, 0x9a, 0x70, 0x6a,
	0x8c, 0x5e, 0x7c, 0x00, 0xc1, 0x83, 0x18, 0x9b, 0xd5, 0x17, 0xd8, 0xb6, 0xa3, 0x19, 0x53, 0xba,
	0x64, 0x77, 0x4b, 0xc4, 0xa7, 0xf1, 0x29, 0x3d, 0x1b, 0xb7, 0x01, 0x29, 0x96, 0x53, 0x67, 0xe6,
	0xff, 0xe6, 0x6f, 0xfe, 0xdd, 0x85, 0x41, 0xc1, 0x0b, 0x76, 0x36, 0x5e, 0x1a, 0xed, 0x34, 0xf6,
	0xfc, 0xc7, 0x46, 0x97, 0x30, 0x7a, 0x32, 0x6f, 0xaa, 0xe4, 0x4f, 0xe5, 0x58, 0x97, 0x0f, 0xb4,
	0x46, 0x84, 0x4e, 0x55, 0x71, 0x2e, 0x82, 0x71, 0x30, 0x39, 0x95, 0xbe, 0x8e, 0xbe, 0x03, 0xc0,
	0x5d, 0x6e, 0xee, 0xbd, 0x30, 0x84, 0x7e, 0x62, 0xf4, 0x3b, 0x65, 0xce, 0x7a, 0xbc, 0x2b, 0xb7,
	0x3d, 0x0a, 0x38, 0x79, 0xa4, 0x45, 0x4a, 0xc6, 0x8a, 0x23, 0x2f, 0x6d, 0x5a, 0xbc, 0x82, 0xb3,
	0xc4, 0xf0, 0x4a, 0x39, 0x92, 0xb4, 0xd4, 0x96, 0x9d, 0x36, 0x4c, 0x56, 0x1c, 0x7b, 0xaa, 0x4d,
	0xc2, 0x18, 0x30, 0xa9, 0xd2, 0x82, 0xb3, 0xc6, 0x42, 0xc7, 0x2f, 0xb4, 0x28, 0x78, 0x01, 0xc3,
	0x17, 0xc3, 0xaa, 0xb8, 0x53, 0x6b, 0x3b, 0xa7, 0x57, 0x27, 0xba, 0x1e, 0x6d, 0x0e, 0x31, 0x82,
	0x81, 0x1f, 0x4c, 0x4b, 0x95, 0x16, 0x94, 0x8b, 0xde, 0x38, 0x98, 0xf4, 0x65, 0x63, 0x16, 0xdd,
	0x42, 0xf8, 0x3f, 0xf7, 0xf4, 0x23, 0x23, 0xca, 0x29, 0xff, 0xcd, 0xbf, 0xa9, 0x7d, 0xfe, 0xbe,
	0xdc, 0xf6, 0xd7, 0x5f, 0x01, 0x0c, 0x6b, 0xfc, 0x99, 0xcc, 0x8a, 0x33, 0xc2, 0xfb, 0x3f, 0x1a,
	0xcf, 0xeb, 0x7b, 0xb0, 0xf1, 0xde, 0xe9, 0x87, 0x51, 0x9b, 0xb0, 0xf7, 0xdb, 0x19, 0x8c, 0x66,
	0xda, 0xec, 0x02, 0x87, 0xfd, 0xc2, 0xc3, 0x7e, 0x69, 0xfd, 0x08, 0x6e, 0x7e, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x56, 0x23, 0x4f, 0x62, 0x1b, 0x02, 0x00, 0x00,
}
